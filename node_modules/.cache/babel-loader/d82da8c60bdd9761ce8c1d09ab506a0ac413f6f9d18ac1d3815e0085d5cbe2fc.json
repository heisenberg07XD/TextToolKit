{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Srini\\\\Desktop\\\\React\\\\textutils2\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import './App.css';\n// import Navbar from './components/navbar';\n// import Textbox from './components/textbox';\n// import { useState } from 'react';\n// function App() {\n//   const[style,setStyle]=useState(false)\n//   return (\n//     <><Navbar style={style}/>\n//     <Textbox heading=\"Enter your text here!\" submit_button1=\"Convert to Uppercase\" submit_button2=\"Convert to Lowercase\"/>\n//     </>\n//   );\n// }\n\n// export default App;\nimport React, { useState } from 'react';\nimport './App.css';\nimport Navbar from './components/navbar';\nimport Textbox from './components/textbox';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [darkMode, setDarkMode] = useState(false);\n  // Function to toggle dark mode\n  const toggleDarkMode = () => {\n    setDarkMode(prevMode => !prevMode);\n  };\n  let div_style = darkMode ? {\n    backgroundColor: \"black\"\n  } : {};\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: div_style,\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        darkMode: darkMode,\n        toggleDarkMode: toggleDarkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Textbox, {\n        heading: \"Enter your text here!\",\n        submit_button1: \"Convert to Uppercase\",\n        submit_button2: \"Convert to Lowercase\",\n        darkMode: darkMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"D2+2tCNohYwQ9K/tGnxPgGRQSlM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Navbar","Textbox","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","darkMode","setDarkMode","toggleDarkMode","prevMode","div_style","backgroundColor","children","style","fileName","_jsxFileName","lineNumber","columnNumber","heading","submit_button1","submit_button2","_c","$RefreshReg$"],"sources":["C:/Users/Srini/Desktop/React/textutils2/src/App.js"],"sourcesContent":["// import './App.css';\n// import Navbar from './components/navbar';\n// import Textbox from './components/textbox';\n// import { useState } from 'react';\n// function App() {\n//   const[style,setStyle]=useState(false)\n//   return (\n//     <><Navbar style={style}/>\n//     <Textbox heading=\"Enter your text here!\" submit_button1=\"Convert to Uppercase\" submit_button2=\"Convert to Lowercase\"/>\n//     </>\n//   );\n// }\n\n// export default App;\nimport React, { useState } from 'react';\nimport './App.css';\nimport Navbar from './components/navbar';\nimport Textbox from './components/textbox';\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState(false);\n  // Function to toggle dark mode\n  const toggleDarkMode = () => {\n    setDarkMode(prevMode => !prevMode);\n  };\n  let div_style=darkMode?{backgroundColor:\"black\"}:{}\n  return (\n    <>\n    <div style={div_style}>\n      <Navbar darkMode={darkMode} toggleDarkMode={toggleDarkMode} />\n      <Textbox heading=\"Enter your text here!\" submit_button1=\"Convert to Uppercase\" submit_button2=\"Convert to Lowercase\" darkMode={darkMode} />\n      </div>\n      \n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAClB,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,OAAO,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE3C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC/C;EACA,MAAMW,cAAc,GAAGA,CAAA,KAAM;IAC3BD,WAAW,CAACE,QAAQ,IAAI,CAACA,QAAQ,CAAC;EACpC,CAAC;EACD,IAAIC,SAAS,GAACJ,QAAQ,GAAC;IAACK,eAAe,EAAC;EAAO,CAAC,GAAC,CAAC,CAAC;EACnD,oBACEV,OAAA,CAAAE,SAAA;IAAAS,QAAA,eACAX,OAAA;MAAKY,KAAK,EAAEH,SAAU;MAAAE,QAAA,gBACpBX,OAAA,CAACH,MAAM;QAACQ,QAAQ,EAAEA,QAAS;QAACE,cAAc,EAAEA;MAAe;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC9DhB,OAAA,CAACF,OAAO;QAACmB,OAAO,EAAC,uBAAuB;QAACC,cAAc,EAAC,sBAAsB;QAACC,cAAc,EAAC,sBAAsB;QAACd,QAAQ,EAAEA;MAAS;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtI;EAAC,gBAEN,CAAC;AAEP;AAACZ,EAAA,CAhBQD,GAAG;AAAAiB,EAAA,GAAHjB,GAAG;AAkBZ,eAAeA,GAAG;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}